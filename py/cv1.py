# -*- coding: utf-8 -*-
"""CMT316_Session_CV1_Lab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YTPELRV9BTbKZSNCrlcFlgGVyrWTKCVZ

**Start with the following code from the last lab session**

 Simple image classification using CIFAR10, also provided by Keras
"""

# Starts with imports
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
# Loading dataset
# It is important to normalise the data
cifar10 = keras.datasets.cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_train = x_train / 255.0
x_test = x_test / 255.0
# Getting to know the data
# 50000 training images, 32*32*3 (RGB 3 channels)
# 10000 test images
# airplanes, cars, birds, cats, deer, dogs, frogs, horses, ships, and trucks.
print(x_train.shape)
print(x_test.shape)
class_names = ["airplane", "car", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]
# show an image
plt.imshow(x_train[0, ])
print(class_names[y_train[0][0]])
plt.show()

"""**Task 1**: Build a Convolutional Neural Network using an architecture similar to the example shown in the lecture demo

Explore different combinations of kernel sizes, and conv/pooling layers.
"""

early_stopping_cb = keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)
model = keras.models.Sequential([
    keras.layers.Conv2D(64, 7, activation="relu", padding="same",
                        input_shape=[28, 28, 1]),
    keras.layers.MaxPooling2D(2),
    keras.layers.Conv2D(128, 3, activation="relu", padding="same"),
    keras.layers.Conv2D(128, 3, activation="relu", padding="same"),
    keras.layers.MaxPooling2D(2),
    keras.layers.Conv2D(256, 3, activation="relu", padding="same"),
    keras.layers.Conv2D(256, 3, activation="relu", padding="same"),
    keras.layers.MaxPooling2D(2),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation="relu"),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(64, activation="relu"),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(10, activation="softmax")
])
model.compile(loss = "sparse_categorical_crossentropy", optimizer="sgd", metrics = ["accuracy"])
# reshape: map data to 4D, with the last dimension of 1 channel (grayscale)
history = model.fit(x_train.reshape((x_train.shape[0], 28, 28, 1)), y_train, epochs = 60, validation_split=0.1, callbacks=[early_stopping_cb])
model.evaluate(x_test.reshape(x_test.shape[0], 28, 28, 1), y_test)

"""**Task 2**: Use pre-trained Xception to classify an image, e.g. the elephant or other images of your choice (Hint: the input image needs to be resized to 299x299)"""

# import Keras & Tensorflow
import tensorflow as tf
import keras

# Load pre-trained Resnet50
model = keras.applications.resnet50.ResNet50(weights="imagenet")

# Connect with Google Drive
from google.colab import drive
drive.mount('/content/gdrive')



# Load in image and perform classification
import keras.utils as image
# import keras.preprocessing.image as image # earlier version of Tensorflow uses this
img = image.load_img("/content/gdrive/My Drive/elephant.jpg", target_size=(229, 229)) # the image is in the root of Google Drive, you can replace it with an arbitrary image you have
# convert the image pixels to a numpy array
img = image.img_to_array(img)
# reshape data for the model
img = img.reshape((1, img.shape[0], img.shape[1], img.shape[2]))
# prepare the image for the model
img = keras.applications.resnet50.preprocess_input(img)
Y_prob = model.predict(img)
# Show top K prediction
top_K = keras.applications.resnet50.decode_predictions(Y_prob, top=3)
for class_id, name, y_proba in top_K[0]:
  print("class_id:", class_id, "name:", name, " ", y_proba*100, "%")